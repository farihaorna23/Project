{"ast":null,"code":"var _jsxFileName = \"/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/genre/genre.js\";\nimport React, { Component } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport \"./genre.css\";\nimport books from \"../../testData/data.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass GenreRecs extends Component {\n  constructor() {\n    super();\n\n    this.handler = genre => {\n      //this is to request data from the server\n      fetch(`https://localhost:5000/home/${genre}`).then(response => response.json()) //converts to js. has the parsed data from the server and that becomes the parameter for the next .then\n      .then(data => {\n        this.setState({\n          recommendations: data //data is response.json\n\n        });\n      }); //this using dummy data incase there is no server. Use this when not connnected to the server.\n\n      /*\n      const recs=books.filter(book=>book.genre===genre)\n        this.setState({\n            recommendations:recs \n        })\n      */\n    };\n\n    this.state = {\n      genres: [\"cooking\", \"romance\", \"drama\", \"fantasy\", \"adventure\", \"action\", \"detective\"],\n      recommendations: []\n    };\n  }\n\n  // this is the end of handler\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button\",\n        children: this.state.genres.map(genre => /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.handler(genre),\n          className: \"right\",\n          variant: \"warning\",\n          size: \"lg\",\n          children: genre\n        }, genre, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recs mt-4\",\n        children: this.state.recommendations.map(rec => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Title: \", rec.book_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Author: \", rec.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Rating: \", rec.rating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Age Range: \", rec.age_range]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Page: \", rec.maximum_pages]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Publication Date: \", rec.publication_date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" Best Seller: \", rec.best_seller]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Series: \", rec.series]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this)]\n        }, rec.book_name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GenreRecs;","map":{"version":3,"sources":["/Users/mahirmahboob/Desktop/nodejs/frontend/src/components/genre/genre.js"],"names":["React","Component","Button","books","GenreRecs","constructor","handler","genre","fetch","then","response","json","data","setState","recommendations","state","genres","render","map","rec","book_name","author","rating","age_range","maximum_pages","publication_date","best_seller","series"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAC9BI,EAAAA,WAAW,GAAG;AACV;;AADU,SAedC,OAfc,GAeLC,KAAD,IAAS;AACb;AACDC,MAAAA,KAAK,CAAE,+BAA8BD,KAAM,EAAtC,CAAL,CACCE,IADD,CACMC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADhB,EACiC;AADjC,OAECF,IAFD,CAEMG,IAAI,IAAE;AACX,aAAKC,QAAL,CAAc;AACVC,UAAAA,eAAe,EAACF,IADN,CACW;;AADX,SAAd;AAGA,OAND,EAFc,CAUjB;;AACA;AACJ;AACA;AACA;AACA;AACA;AAEO,KAjCW;;AAEV,SAAKG,KAAL,GAAa;AACVC,MAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,SAAhC,EAA2C,WAA3C,EAAwD,QAAxD,EAAkE,WAAlE,CADE;AAEVF,MAAAA,eAAe,EAAC;AAFN,KAAb;AAIH;;AA2BG;AAEJG,EAAAA,MAAM,GAAG;AACR,wBACG;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBACC,KAAKF,KAAL,CAAWC,MAAX,CAAkBE,GAAlB,CAAsBX,KAAK,iBAC5B,QAAC,MAAD;AAAoB,UAAA,OAAO,EAAG,MAAI,KAAKD,OAAL,CAAaC,KAAb,CAAlC;AAAuD,UAAA,SAAS,EAAC,OAAjE;AAAyE,UAAA,OAAO,EAAC,SAAjF;AAA2F,UAAA,IAAI,EAAC,IAAhG;AAAA,oBACCA;AADD,WAAaA,KAAb;AAAA;AAAA;AAAA;AAAA,gBADC;AADD;AAAA;AAAA;AAAA;AAAA,cADA,eASJ;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBAEQ,KAAKQ,KAAL,CAAWD,eAAX,CAA2BI,GAA3B,CAA+BC,GAAG,iBAC9B;AAAwB,UAAA,SAAS,EAAC,WAAlC;AAAA,kCACA;AAAA,mCAAaA,GAAG,CAACC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AAAA,oCAAcD,GAAG,CAACE,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,eAGA;AAAA,oCAAcF,GAAG,CAACG,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHA,eAIA;AAAA,uCAAiBH,GAAG,CAACI,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJA,eAKA;AAAA,kCAAYJ,GAAG,CAACK,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,kBALA,eAMA;AAAA,8CAAwBL,GAAG,CAACM,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBANA,eAOA;AAAA,yCAAmBN,GAAG,CAACO,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPA,eAQA;AAAA,mCAAaP,GAAG,CAACQ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,kBARA;AAAA,WAAUR,GAAG,CAACC,SAAd;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,cATI;AAAA;AAAA;AAAA;AAAA;AAAA,YADH;AA4BA;;AAjE6B;;AAoElC,eAAehB,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport \"./genre.css\"\nimport books from \"../../testData/data.js\" \n\nclass GenreRecs extends Component {\n    constructor() {\n        super();\n        this.state = {\n           genres: [\"cooking\", \"romance\", \"drama\", \"fantasy\", \"adventure\", \"action\", \"detective\"], \n           recommendations:[],\n        };\n    };\n   \n    //when a button is clicked, it is going to send a request to server to get the data\n    //and when we get the data back, we would be able to put that in the recommendation array\n    //the get request will get data specific for that genre\n    //data is the array of all the book recommendation\n    //the data that we get back is json data\n\n    \n    handler=(genre)=>{\n        //this is to request data from the server\n       fetch(`https://localhost:5000/home/${genre}`)\n       .then(response=>response.json()) //converts to js. has the parsed data from the server and that becomes the parameter for the next .then\n       .then(data=>{\n        this.setState({\n            recommendations:data //data is response.json\n           })\n       })\n      \n    //this using dummy data incase there is no server. Use this when not connnected to the server.\n    /*\n    const recs=books.filter(book=>book.genre===genre)\n      this.setState({\n          recommendations:recs \n      })\n    */\n\n      } // this is the end of handler\n    \n    render() {\n     return (  \n        <div >\n        <div className=\"button\">\n        {this.state.genres.map(genre => (\n        <Button key={genre} onClick={ ()=>this.handler(genre)} className=\"right\" variant=\"warning\" size=\"lg\">\n        {genre}\n        </Button>\n        ))}\n        \n    </div>\n    <div className=\"recs mt-4\">\n        {\n            this.state.recommendations.map(rec=>(\n                <div key={rec.book_name}className=\"book-card\">\n                <h2> Title: {rec.book_name}</h2>\n                <h2> Author: {rec.author}</h2>\n                <h2> Rating: {rec.rating}</h2>\n                <h2> Age Range: {rec.age_range}</h2>\n                <h2> Page: {rec.maximum_pages}</h2>\n                <h2> Publication Date: {rec.publication_date}</h2>\n                <h2> Best Seller: {rec.best_seller}</h2>\n                <h2>Series: {rec.series}</h2>\n                </div>\n            ))\n        }\n    </div>\n        </div>\n    );\n    }\n}\n\nexport default GenreRecs;"]},"metadata":{},"sourceType":"module"}